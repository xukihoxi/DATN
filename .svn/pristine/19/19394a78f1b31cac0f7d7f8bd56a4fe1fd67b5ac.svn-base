# -*- coding: utf-8 -*-

from odoo import models, fields, api
from odoo.exceptions import ValidationError, except_orm


class PartnerInteraction(models.Model):
    _name = 'partner.interaction'

    name = fields.Char(related='partner_id.name', string='Name', readonly=1, store=True)
    partner_id = fields.Many2one('res.partner', string='Partner', track_visibility='onchange')
    therapy_record_id = fields.Many2one('therapy.record', string='Therapy record', track_visibility='onchange')
    user_id = fields.Many2one('res.users', default=lambda self: self.env.uid, string='User')
    expected_date = fields.Date(string="Expected date", default=fields.Date.context_today)
    actual_date = fields.Date(string="Actual date", default=fields.Date.context_today)
    mail_activity_type_id = fields.Many2one('mail.activity.date', string='Activity type')
    content = fields.Text(string='Content')
    read_therapy_record_start = fields.Datetime(string='Read therapy record start')
    read_therapy_record_end = fields.Datetime(string='Read therapy record end')
    read_time = fields.Float(string='Read time')
    state = fields.Selection([('new', 'New'), ('reading', 'Reading')])

    # @api.multi
    # def action_assign(self):
    #     for interaction in self:
    #         if not interaction.survey_id: raise except_orm("Thông báo", "Bạn chưa chọn nhân viên được giao!")
    #         model_partner = self.env['ir.model'].search([('model', '=', self.partner_id._name)], limit=1)
    #         if not model_partner: raise except_orm("Thông báo", "Không tìm thấy model: %s" % (str(self.partner_id._name)))
    #         self.env['mail.activity'].create({
    #             'activity_type_id': self.activity_type_id.id,
    #             'res_id': self.partner_id.id,
    #             'res_model_id': model_partner.id,
    #             'res_name': self.partner_id._name,
    #             'summary': 'summary Chăm sóc khách hàng',
    #             'note': 'note Chăm sóc khách hàng',
    #             'user_id': self.user_id.id,
    #             'date_deadline': self.date,
    #         })
    #
    # @api.multi
    # def action_view_user_input_line(self):
    #     action = self.env.ref('izi_crm_interaction.result_interaction_action_window').read()[0]
    #     user_input_lines = self.mapped('x_user_input_line_ids')
    #     if user_input_lines:
    #         action['domain'] = [('id', 'in', user_input_lines.ids)]
    #     else:
    #         action['domain'] = [('id', '=', 0)]
    #     return action
    #
    # @api.depends('x_user_input_line_ids')
    # def _compute_user_input_line_count(self):
    #     for s in self:
    #         s.x_user_input_line_count = len(s.x_user_input_line_ids)
    #
    # @api.multi
    # def unlink(self):
    #     for line in self:
    #         if line.state != 'draft':
    #             raise except_orm('Cảnh báo!', ('Chỉ xóa bản ghi ở trạng thái nháp'))
    #     super(PartnerInteraction, self).unlink()
    #
    # @api.multi
    # def action_done(self):
    #     if self.state != 'draft':
    #         raise except_orm('Thông báo', 'Bản ghi đã thay đổi trạng thái, tải lại trang để cập nhật')
    #     if not self.survey_user_input_id:
    #         raise except_orm('Thông báo', 'Chưa nhập kết quả tương tác không thể hoàn thành.')
    #     if not self.survey_user_input_id.user_input_line_ids:
    #         raise except_orm('Thông báo', 'Chưa nhập câu trả lời không thể hoàn thành.')
    #
    #     self.state = 'done'
    #
    # @api.multi
    # def action_cancel(self):
    #     if self.state != 'draft':
    #         raise except_orm('Thông báo', 'Bản ghi đã thay đổi trạng thái, tải lại trang để cập nhật')
    #     self.state = 'cancel'
    #
    # @api.multi
    # def action_create_service_booking(self):
    #     view_id = self.env.ref('izi_crm_booking.service_booking_form_view').id
    #     ctx = {
    #         'default_customer_id': self.partner_id.id,
    #         'default_contact_number': self.partner_id.phone,
    #         'default_user_id': False,
    #     }
    #     return {
    #         'type': 'ir.actions.act_window',
    #         'res_model': 'service.booking',
    #         'view_type': 'form',
    #         'view_mode': 'form',
    #         'views': [(view_id, 'form')],
    #         'target': 'current',
    #         'context': ctx,
    #     }
    #
    # @api.multi
    # def action_input_result_interaction(self):
    #     if not self.survey_id:
    #         raise except_orm('Thông báo', 'Chưa có mẫu đánh giá!')
    #     """ Open the website page with the survey form """
    #     self.ensure_one()
    #     user_inputs = self.env['survey.user_input'].search([('x_partner_interaction_id', '=', self.id)])
    #     if user_inputs:
    #         for user_input in user_inputs:
    #             user_input.unlink()
    #
    #     user_input = self.env['survey.user_input'].create({
    #         'survey_id': self.survey_id.id,
    #         'test_entry': False,
    #         'partner_id': self.partner_id.id,
    #         'x_user_id': self._uid,
    #         'x_partner_interaction_id': self.id,
    #         'type': 'manually'
    #     })
    #     token = user_input.token
    #     self.survey_user_input_id = user_input.id
    #
    #     return {
    #         "type": "ir.actions.client",
    #         'name': 'Start Survey',
    #         'tag': 'BirtViewerAction',
    #         'target': 'new',
    #         'context': {'birt_link': self.survey_id.with_context(relative_url=True).public_url.replace('start', 'fill') +'/'+ token}
    #     }