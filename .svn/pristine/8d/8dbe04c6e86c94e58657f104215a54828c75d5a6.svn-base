# -*- coding: utf-8 -*-

from odoo import fields, models, api, _
from datetime import timedelta, datetime, date
from odoo.exceptions import ValidationError, except_orm, UserError


class UseServiceCard(models.Model):
    _inherit = 'izi.service.card.using'

    @api.multi
    def action_done(self):
        super(UseServiceCard, self).action_done()
        for service_card in self:
            #todo kiểm tra xem có dịch vụ nào cấu hình nhắc lịch hay không?
            check = False
            arr_service_remind = []
            for service_card1 in service_card.service_card1_ids:
                if service_card1.service_id.x_is_remind:
                    check = True
                    arr_service_remind.append(service_card1.service_id)
            #todo nếu có nhắc lịch thì tạo nhắc lịch (activity.history)
            if check:
                for service_remind in arr_service_remind:
                    #todo kiểm tra và lấy cầu hình nhắc lịch trên dịch vụ
                    if service_remind.x_service_remind_ids:
                        config_remind = service_remind.get_config_remind(service_remind.x_service_remind_ids)
                    #todo kiểm tra và lấy cầu hình nhắc lịch trên nhóm dịch vụ
                    elif service_remind.categ_id.x_product_categ_remind_ids:
                        config_remind = service_remind.get_config_remind(service_remind.categ_id.x_product_categ_remind_ids)
                    else:
                        raise UserError(_("Dịch vụ %s cần nhắc lịch nhưng chưa cấu hình cho dịch vụ đó") % str(service_remind.default_code))
                    #todo tạo lịch nhắc
                    for config in config_remind:
                        if not config['repeat']:
                            #todo lịch nhắc khi đối tượng là CSKH
                            if config['object'] == 'customer_care':
                                service_card.env['activity.history'].create({
                                    'therapy_record_id': service_card.therapy_record_id.id if service_card.therapy_record_id else False,
                                    'partner_id': service_card.customer_id.id,
                                    'mail_activity_type_id': config['activity_type_id'],
                                    'type': 'customer_care',
                                    'object': config['object'],
                                    'user_id': False,
                                    'date_deadline': timedelta(days=config['date_number']) + datetime.strptime(service_card.redeem_date, '%Y-%m-%d %H:%M:%S'),
                                    'is_activity_constant': True,
                                })
                            # todo lịch nhắc khi đối tượng là TVV
                            else:
                                activity = service_card.env['activity.history'].create({
                                    'therapy_record_id': service_card.therapy_record_id.id if service_card.therapy_record_id else False,
                                    'partner_id': service_card.customer_id.id,
                                    'mail_activity_type_id': config['activity_type_id'],
                                    'type': 'customer_care',
                                    'object': config['object'],
                                    'user_id': service_card.customer_id.user_id.id,
                                    'date_deadline': timedelta(days=config['date_number']) + datetime.strptime(service_card.redeem_date, '%Y-%m-%d %H:%M:%S'),
                                    'is_activity_constant': True,
                                })
                                #todo gọi luôn hàm giao TVV
                                activity.action_assign()